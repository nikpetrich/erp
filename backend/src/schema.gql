# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MutationRequestOutput {
  succeeded: Float!
}

type Warehouse {
  id: Int!
  title: String!
  phone: String
  mail: String
  modified: DateTime!
  created: DateTime!
  articles: [Article!]
  address: Address!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Article {
  id: Int!
  number: String!
  originalNumber: String!
  title: String!
  price: Float!
  amount: Int!
  manufacturer: String
  modified: DateTime!
  created: DateTime!
  warehouse: Warehouse!
}

type Customer {
  id: Int!
  title: String!
  phone: String
  mail: String
  modified: DateTime!
  created: DateTime!
  invoices: [Invoice!]
  address: Address!
}

type User {
  id: Int!
  username: String!
  password: String!
  role: UserRole!
  modified: DateTime!
  created: DateTime!
  invoices: [Invoice!]
}

"""The user role"""
enum UserRole {
  Admin
  Employee
  Consultant
}

type Invoice {
  id: Int!
  title: String!
  discount: Int
  paymentMethod: PaymentMethod!
  additionalInfo: String
  modified: DateTime!
  created: DateTime!
  client: Client!
  user: User!
  customer: Customer!
  articles: [Article!]!
}

"""The payment method"""
enum PaymentMethod {
  EC
  Transfer
  Cash
}

type Client {
  id: Int!
  title: String!
  phone: String
  mail: String
  modified: DateTime!
  created: DateTime!
  address: Address!
  invoices: [Invoice!]
}

type Address {
  id: Int!
  city: String!
  country: String!
  zip: String!
  street: String!
  houseNumber: String!
  modified: DateTime!
  created: DateTime!
  customers: [Customer!]
  warehouses: [Warehouse!]
  clients: [Client!]
}

type Query {
  addresses: [Address!]!
  address(id: Int!): Address!
  clients: [Client!]!
  client(id: Int!): Client!
  customers: [Customer!]!
  customer(id: Int!): Customer!
  articles: [Article!]!
  article(id: Int!): Article!
  invoices: [Invoice!]!
  invoice(id: Int!): Invoice!
  users: [User!]!
  user(id: Int!): User!
  warehouses: [Warehouse!]!
  warehouse(id: Int!): Warehouse!
}

type Mutation {
  createAddress(createAddressInput: CreateAddressInput!): MutationRequestOutput!
  updateAddress(id: Int!, updateAddressInput: UpdateAddressInput!): MutationRequestOutput!
  removeAddress(id: Int!): MutationRequestOutput!
  createClient(createClientInput: CreateClientInput!): MutationRequestOutput!
  updateClient(id: Int!, updateClientInput: UpdateClientInput!): MutationRequestOutput!
  removeClient(id: Int!): MutationRequestOutput!
  createCustomer(createCustomerInput: CreateCustomerInput!): MutationRequestOutput!
  updateCustomer(id: Int!, updateCustomerInput: UpdateCustomerInput!): MutationRequestOutput!
  removeCustomer(id: Int!): MutationRequestOutput!
  createArticle(createArticleInput: CreateArticleInput!): MutationRequestOutput!
  updateArticle(id: Int!, updateArticleInput: UpdateArticleInput!): MutationRequestOutput!
  removeArticle(id: Int!): MutationRequestOutput!
  createInvoice(createInvoiceInput: CreateInvoiceInput!): MutationRequestOutput!
  updateInvoice(id: Int!, updateInvoiceInput: UpdateInvoiceInput!): MutationRequestOutput!
  removeInvoice(id: Int!): MutationRequestOutput!
  createUser(createUserInput: CreateUserInput!): MutationRequestOutput!
  updateUser(id: Int!, updateUserInput: UpdateUserInput!): MutationRequestOutput!
  removeUser(id: Int!): MutationRequestOutput!
  createWarehouse(createWarehouseInput: CreateWarehouseInput!): MutationRequestOutput!
  updateWarehouse(id: Int!, updateWarehouseInput: UpdateWarehouseInput!): MutationRequestOutput!
  removeWarehouse(id: Int!): MutationRequestOutput!
}

input CreateAddressInput {
  city: String!
  country: String!
  zip: String!
  street: String!
  houseNumber: String!
}

input UpdateAddressInput {
  city: String
  country: String
  zip: String
  street: String
  houseNumber: String
}

input CreateClientInput {
  title: String!
  phone: String
  mail: String
  address: MutationRelationshipInput!
}

input MutationRelationshipInput {
  id: Int!
}

input UpdateClientInput {
  title: String
  phone: String
  mail: String
  address: MutationRelationshipInput
}

input CreateCustomerInput {
  title: String!
  phone: String
  mail: String
  address: MutationRelationshipInput!
}

input UpdateCustomerInput {
  title: String
  phone: String
  mail: String
  address: MutationRelationshipInput
}

input CreateArticleInput {
  number: String!
  originalNumber: String!
  title: String!
  price: Float!
  amount: Int!
  manufacturer: String
  warehouse: MutationRelationshipInput!
}

input UpdateArticleInput {
  number: String
  originalNumber: String
  title: String
  price: Float
  amount: Int
  manufacturer: String
  warehouse: MutationRelationshipInput
}

input CreateInvoiceInput {
  title: String!
  discount: Int
  paymentMethod: PaymentMethod!
  additionalInfo: String
  client: MutationRelationshipInput!
  user: MutationRelationshipInput!
  customer: MutationRelationshipInput!
  articleIds: [Int!]!
}

input UpdateInvoiceInput {
  title: String
  discount: Int
  paymentMethod: PaymentMethod
  additionalInfo: String
  client: MutationRelationshipInput
  user: MutationRelationshipInput
  customer: MutationRelationshipInput
  articleIds: [Int!]
}

input CreateUserInput {
  username: String!
  password: String!
  role: UserRole!
}

input UpdateUserInput {
  username: String
  password: String
  role: UserRole
}

input CreateWarehouseInput {
  title: String!
  phone: String
  mail: String
  address: MutationRelationshipInput!
}

input UpdateWarehouseInput {
  title: String
  phone: String
  mail: String
  address: MutationRelationshipInput
}