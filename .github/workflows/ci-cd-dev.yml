name: Docker ci/cd development
# Notes:
# - Need to authenticate the `git clone` cmd when repository is private

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

env:
  REGISTRY: ghcr.io
  TAG: dev
  REPONAME: erp
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKUP_IMAGE_NAME: ${{ github.repository }}/backup

jobs:
  # publish:
  #   name: publish images
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Login
  #       run: |
  #         echo ${{ secrets.PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #     - name: Build and publish
  #       run: |
  #         export TAG=${{ env.TAG }}
  #         docker compose -f docker-compose-build.yml build
  #         docker images
  #         docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.TAG }}
  #         docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.TAG }}
  #         docker push ${{ env.REGISTRY }}/${{ env.BACKUP_IMAGE_NAME }}:${{ env.TAG }}
  #       env:
  #         TAG: ${{ env.TAG }}

  deploy:
    # needs: publish
    name: deploy images
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST_DEV }} > ~/.ssh/known_hosts

      - name: connect and pull
        run: |
          ssh ${{ secrets.SSH_USER_DEV }}@${{ secrets.SSH_HOST_DEV }} "\
          export TAG=${{ env.TAG }}
          echo $TAG
          [ -d ${{ env.REPONAME }} ] || git clone git@github.com:${{ github.repository }}.git && \
          cd ${{ env.REPONAME }} && \
          git checkout dev && git pull && \
          docker compose -f docker-compose-deploy.yml pull && \
          docker compose -f docker-compose-deploy.yml up -d && \
          exit"
        env:
          TAG: ${{ env.TAG }}

      - name: cleanup
        run: rm -rf ~/.ssh
